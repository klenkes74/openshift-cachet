#!/bin/bash
set -o errexit -o nounset -o pipefail


[ "${DEBUG:-false}" == true ] && set -x

initialize_system() {
  echo "Initializing Cachet container ..."

  APP_KEY=${APP_KEY:-}
  APP_ENV=${APP_ENV:-development}
  APP_DEBUG=${APP_DEBUG:-true}
  APP_URL=${APP_URL:-http://localhost}
  APP_LOG=${APP_LOG:-errorlog}

  DB_DRIVER=${DB_DRIVER:-pgsql}
  DB_HOST=${STATUS_DB_SERVICE_HOST:-postgres}
  DB_DATABASE=${DB_DATABASE:-cachet}
  DB_PREFIX=${DB_PREFIX:-}
  DB_USER=${DB_USER:-postgres}
  DB_PASSWORD=${DB_PASSWORD:-postgres}
  DB_PORT=${DB_PORT:-}
  DB_PREFIX=${DB_PREFIX:-}

  if [[ "${DB_DRIVER}" = "pgsql" ]]; then
    DB_PORT=${DB_PORT:-5432}
  fi

  if [[ "${DB_DRIVER}" = "mysql" ]]; then
    DB_PORT=${DB_PORT:-3306}
  fi

  if [[ "${DB_DRIVER}" = "sqlite" ]]; then
    DB_DATABASE=""
    DB_HOST=""
    DB_PORT=""
    DB_USER=""
    DB_PASSWORD=""
  fi

  CACHE_DRIVER=${CACHE_DRIVER:-apc}

  SESSION_DRIVER=${SESSION_DRIVER:-}
  SESSION_DOMAIN=${SESSION_DOMAIN:-$APP_URL}
  SESSION_SECURE_COOKIE=${SESSION_SECURE_COOKIE:-}

  QUEUE_DRIVER=${QUEUE_DRIVER:-database}
  CACHET_EMOJI=${CACHET_EMOJI:-false}
  CACHET_BEACON=${CACHET_BEACON:-true}
  CACHET_AUTO_TWITTER=${CACHET_AUTO_TWITTER:-true}

  MAIL_DRIVER=${MAIL_DRIVER:-smtp}
  MAIL_HOST=${MAIL_HOST:-localhost}
  MAIL_PORT=${MAIL_PORT:-25}
  MAIL_USERNAME=${MAIL_USERNAME:-}
  MAIL_PASSWORD=${MAIL_PASSWORD:-}
  MAIL_ADDRESS=${MAIL_ADDRESS:-}
  MAIL_NAME=${MAIL_NAME:-}
  MAIL_ENCRYPTION=${MAIL_ENCRYPTION:-}

  REDIS_HOST=${REDIS_HOST:-}
  REDIS_DATABASE=${REDIS_DATABASE:-}
  REDIS_PORT=${REDIS_PORT:-}
  REDIS_PASSWORD=${REDIS_PASSWORD:-}

  GITHUB_TOKEN=${GITHUB_TOKEN:-}

  NEXMO_KEY=${NEXMO_KEY:-}
  NEXMO_SECRET=${NEXMO_SECRET:-}
  NEXMO_SMS_FROM=${NEXMO_SMS_FROM:-Cachet}

  PHP_MAX_CHILDREN=${PHP_MAX_CHILDREN:-5}

  TRUSTED_PROXIES=${TRUSTED_PROXIES:-}

  # configure env file

  cd /opt/app-root/src/config
  cp ../.env.template .env
  sed 's,{{APP_ENV}},'"${APP_ENV}"',g' -i .env
  sed 's,{{APP_DEBUG}},'"${APP_DEBUG}"',g' -i .env
  sed 's,{{APP_URL}},'"${APP_URL}"',g' -i .env
  sed 's,{{APP_LOG}},'"${APP_LOG}"',g' -i .env

  sed 's,{{DB_DRIVER}},'"${DB_DRIVER}"',g' -i .env
  sed 's,{{DB_HOST}},'"${STATUS_DB_SERVICE_HOST}"',g' -i .env
  sed 's,{{DB_DATABASE}},'"${DB_DATABASE}"',g' -i .env
  sed 's,{{DB_PREFIX}},'"${DB_PREFIX}"',g' -i .env
  sed 's,{{DB_USER}},'"${DB_USER}"',g' -i .env
  sed 's,{{DB_PASSWORD}},'"${DB_PASSWORD}"',g' -i .env
  sed 's,{{DB_PORT}},'"${DB_PORT}"',g' -i .env
  sed 's,{{DB_PREFIX}},'"${DB_PREFIX}"',g' -i .env

  sed 's,{{CACHE_DRIVER}},'"${CACHE_DRIVER}"',g' -i .env

  sed 's,{{SESSION_DRIVER}},'"${SESSION_DRIVER}"',g' -i .env
  sed 's,{{SESSION_DOMAIN}},'"${SESSION_DOMAIN}"',g' -i .env
  sed 's,{{SESSION_SECURE_COOKIE}},'"${SESSION_SECURE_COOKIE}"',g' -i .env

  sed 's,{{QUEUE_DRIVER}},'"${QUEUE_DRIVER}"',g' -i .env
  sed 's,{{CACHET_EMOJI}},'"${CACHET_EMOJI}"',g' -i .env
  sed 's,{{CACHET_BEACON}},'"${CACHET_BEACON}"',g' -i .env
  sed 's,{{CACHET_AUTO_TWITTER}},'"${CACHET_AUTO_TWITTER}"',g' -i .env

  sed 's,{{MAIL_DRIVER}},'"${MAIL_DRIVER}"',g' -i .env
  sed 's,{{MAIL_HOST}},'"${MAIL_HOST}"',g' -i .env
  sed 's,{{MAIL_PORT}},'"${MAIL_PORT}"',g' -i .env
  sed 's,{{MAIL_USERNAME}},'"${MAIL_USERNAME}"',g' -i .env
  sed 's,{{MAIL_PASSWORD}},'"${MAIL_PASSWORD}"',g' -i .env
  sed 's,{{MAIL_ADDRESS}},'"${MAIL_ADDRESS}"',g' -i .env
  sed 's,{{MAIL_NAME}},'"${MAIL_NAME}"',g' -i .env
  sed 's,{{MAIL_ENCRYPTION}},'"${MAIL_ENCRYPTION}"',g' -i .env

  sed 's,{{REDIS_HOST}},'"${REDIS_HOST}"',g' -i .env
  sed 's,{{REDIS_DATABASE}},'"${REDIS_DATABASE}"',g' -i .env
  sed 's,{{REDIS_PORT}},'"${REDIS_PORT}"',g' -i .env
  sed 's,{{REDIS_PASSWORD}},'"${REDIS_PASSWORD}"',g' -i .env

  sed 's,{{GITHUB_TOKEN}},'"${GITHUB_TOKEN}"',g' -i .env

  sed 's,{{NEXMO_KEY}},'"${NEXMO_KEY}"',g' -i .env
  sed 's,{{NEXMO_SECRET}},'"${NEXMO_SECRET}"',g' -i .env
  sed 's,{{NEXMO_SMS_FROM}},'"${NEXMO_SMS_FROM}"',g' -i .env

  sed 's,{{TRUSTED_PROXIES}},'"${TRUSTED_PROXIES}"',g' -i .env

  if [[ -z "${APP_KEY}" ]]; then
    keygen="$(php artisan key:generate)"
    APP_KEY=$(echo "${keygen}" | grep -oP '(?<=\[).*(?=\])')
    echo "ERROR: Please set the 'APP_KEY=${APP_KEY}' environment variable at runtime or in the secret for the appkey and re-launch"
    exit 0
  fi

  sed "s,{{APP_KEY}},$APP_KEY,g" -i .env

  # remove empty lines
  sed '/^.*=""$/d'  -i .env
  cd -

  rm -rf bootstrap/cache/*
}

init_db() {
  echo "Initializing Cachet database ..."
  php artisan app:install
  check_configured
}

migrate_db() {
  force=""
  if [[ "${FORCE_MIGRATION:-false}" == true ]]; then
    force="--force"
  fi
  php artisan migrate ${force}
}

seed_db() {
  php artisan db:seed
}

start_system() {
  initialize_system
  init_db
  migrate_db
  seed_db
  echo "Starting Cachet! ..."
  php artisan config:cache

  exec /usr/libexec/run
}

start_system

exit 0